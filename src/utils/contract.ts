import { utils } from "ethers";

export const logbookABI = [
  "constructor(string name_, string symbol_)",
  "error InsufficientAmount(uint256 available, uint256 required)",
  "error InsufficientBalance(uint256 available, uint256 required)",
  "error InsufficientLogs(uint32 maxEndAt)",
  "error InvalidBPS(uint256 min, uint256 max)",
  "error InvalidTokenId(uint256 min, uint256 max)",
  "error PublicSaleNotStarted()",
  "error TokenNotExists()",
  "error Unauthorized()",
  "error ZeroAmount()",
  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
  "event Content(address indexed author, bytes32 indexed contentHash, string content)",
  "event Donate(uint256 indexed tokenId, address indexed donor, uint256 amount)",
  "event Fork(uint256 indexed tokenId, uint256 indexed newTokenId, address indexed owner, uint32 end, uint256 amount)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "event Pay(uint256 indexed tokenId, address indexed sender, address indexed recipient, uint256 amount, uint8 purpose)",
  "event Publish(uint256 indexed tokenId, bytes32 indexed contentHash)",
  "event SetDescription(uint256 indexed tokenId, string description)",
  "event SetForkPrice(uint256 indexed tokenId, uint256 amount)",
  "event SetTitle(uint256 indexed tokenId, string title)",
  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
  "event Withdraw(address indexed account, uint256 amount)",
  "function approve(address to, uint256 tokenId)",
  "function balanceOf(address owner) view returns (uint256)",
  "function claim(address to_, uint256 logrsId_)",
  "function donate(uint256 tokenId_) payable",
  "function donateWithCommission(uint256 tokenId_, address commission_, uint256 commissionBPS_) payable",
  "function fork(uint256 tokenId_, uint32 endAt_) payable returns (uint256 tokenId)",
  "function forkWithCommission(uint256 tokenId_, uint32 endAt_, address commission_, uint256 commissionBPS_) payable returns (uint256 tokenId)",
  "function getApproved(uint256 tokenId) view returns (address)",
  "function getBalance(address account_) view returns (uint256 amount)",
  "function getLogbook(uint256 tokenId_) view returns (tuple(uint32 endAt, uint32 logCount, uint32 transferCount, uint160 createdAt, uint256 from, uint256 forkPrice, bytes32[] contentHashes) book)",
  "function getLogs(uint256 tokenId_) view returns (bytes32[] contentHashes, address[] authors)",
  "function isApprovedForAll(address owner, address operator) view returns (bool)",
  "function logs(bytes32) view returns (address author, uint256 tokenId)",
  "function multicall(bytes[] data) payable returns (bytes[] results)",
  "function name() view returns (string)",
  "function owner() view returns (address)",
  "function ownerOf(uint256 tokenId) view returns (address)",
  "function publicSale() view returns (uint256)",
  "function publicSaleMint() payable returns (uint256 tokenId)",
  "function publicSalePrice() view returns (uint256)",
  "function publish(uint256 tokenId_, string content_)",
  "function renounceOwnership()",
  "function safeTransferFrom(address from, address to, uint256 tokenId)",
  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)",
  "function setApprovalForAll(address operator, bool approved)",
  "function setDescription(uint256 tokenId_, string description_)",
  "function setForkPrice(uint256 tokenId_, uint256 amount_)",
  "function setPublicSalePrice(uint256 price_)",
  "function setTitle(uint256 tokenId_, string title_)",
  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
  "function symbol() view returns (string)",
  "function tokenURI(uint256 tokenId_) view returns (string)",
  "function transferFrom(address from, address to, uint256 tokenId)",
  "function transferOwnership(address newOwner)",
  "function turnOffPublicSale()",
  "function turnOnPublicSale()",
  "function withdraw()",
];

export const logbookInterface = new utils.Interface(logbookABI);
